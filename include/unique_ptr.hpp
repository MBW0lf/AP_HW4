#include "unique_ptr.h"
///////////Constructor////////////////////////////////////////////////////////////////
template<typename T>
UniquePtr<T> :: UniquePtr() : _p{nullptr}{};
///////////Constructor////////////////////////////////////////////////////////////////
template<typename T>
UniquePtr<T> :: UniquePtr(T* p) : _p{p}{};
///////////Constructor////////////////////////////////////////////////////////////////
template<typename T>
UniquePtr<T> :: UniquePtr(UniquePtr &ptr)
{
    _p = ptr.get();
}
///////////Deconstructor//////////////////////////////////////////////////////////////
template<typename T>
UniquePtr<T> :: ~UniquePtr() 
{
    _p = nullptr;
}
///////////Operator*//////////////////////////////////////////////////////////////////
template<typename T>
T& UniquePtr<T>::operator*()
{
    return (*_p);
}
///////////Operator=//////////////////////////////////////////////////////////////////
template<typename T>
UniquePtr<T>& UniquePtr<T>::operator=(const UniquePtr& p)
{
    _p = p.release();
    return(*this);
}
///////////Get////////////////////////////////////////////////////////////////////////
template<typename T>
T* UniquePtr<T>::get()
{
    return _p;
}