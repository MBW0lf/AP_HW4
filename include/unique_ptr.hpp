#include "unique_ptr.h"
///////////Constructor////////////////////////////////////////////////////////////////
template<typename T>
UniquePtr<T> :: UniquePtr() : _p{nullptr}{};
///////////Constructor////////////////////////////////////////////////////////////////
template<typename T>
UniquePtr<T> :: UniquePtr(T* p) : _p{p}{};
///////////Constructor////////////////////////////////////////////////////////////////
// template<typename T>
// UniquePtr<T> :: UniquePtr(UniquePtr &ptr)
// {
//     _p = ptr.get();
// }
///////////Deconstructor//////////////////////////////////////////////////////////////
template<typename T>
UniquePtr<T> :: ~UniquePtr() 
{
    delete _p;
    _p = nullptr;
}
///////////Operator*//////////////////////////////////////////////////////////////////
template<typename T>
T& UniquePtr<T>::operator*()
{
    return (*_p);
}
///////////Operator->/////////////////////////////////////////////////////////////////
template<typename T>
T* UniquePtr<T>::operator->()
{
    return _p;
}
///////////Operator=//////////////////////////////////////////////////////////////////
// template<typename T>
// UniquePtr<T>& UniquePtr<T>::operator=(const UniquePtr& p)
// {
//     _p = p.release();
//     return(*this);
// }
///////////Get////////////////////////////////////////////////////////////////////////
template<typename T>
T* UniquePtr<T>::get()
{
    return _p;
}
///////////reset1/////////////////////////////////////////////////////////////////////
template<typename T>
void UniquePtr<T>::reset()
{
    delete _p;
    _p = nullptr;
}
///////////reset2/////////////////////////////////////////////////////////////////////
template<typename T>
UniquePtr<T>& UniquePtr<T>::reset(T* p)
{
    delete _p;
    _p = p;
    return(*this);
}
///////////Operator Bool//////////////////////////////////////////////////////////////
template<typename T>
UniquePtr<T>::operator bool()
{
    if(_p)
        return true;
    return false;
}
///////////Release//////////////////////////////////////////////////////////////
template<typename T>
T* UniquePtr<T>::release()
{
    T* outpt = _p;
    _p = nullptr;
    return outpt;
}